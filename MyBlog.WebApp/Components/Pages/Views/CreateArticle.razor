@page "/CreateArticle"
@inherits MyBlog.WebApp.Components.Pages.ComponentsBase.CreateArticleBase
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<h3>Post an article</h3>

<EditForm Model="@Article" OnValidSubmit="HandleValidSubmit" FormName="articleForm">
    <InputText id="bookTitle" @bind-Value="Article.BookTitle"/><br>
    <InputText id="bookAuthor" @bind-Value="Article.BookAuthor"/><br>
    <InputFile OnChange="HandleFileUpload"/><br>
    <InputText id="bookResume" @bind-Value="Article.BookResume"/><br>
    <InputNumber id="bookNumOfPages" @bind-Value="Article.BookNumberOfPages"/><br>
    <InputText id="textSection" @bind-Value="Article.TextSection"/><br>
    <InputText id="reviewResume" @bind-Value="Article.ReviewResume"/><br>
    <InputNumber id="myNote" @bind-Value="Article.MyNote"/><br>
    @if (Article.Quotes != null && Article.Quotes.Count > 0)
    {
        foreach (var quote in Article.Quotes)
        {
            <div>
                <span>@quote</span>
                <button type="button" @onclick="() => RemoveQuote(quote)">Delete quote</button>
            </div>
        }
    }
    
    <InputText id="newQuote" @bind-Value="NewQuote"/>
    <button type="button" @onclick="AddQuote">Add a new quote</button><br/>

    <button type="submit">Create</button>
</EditForm>

@code {

    public async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                Article.BookCover = memoryStream.ToArray();
            }
        }
    }

}
